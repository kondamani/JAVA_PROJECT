pipeline {
  agent {
    docker {
      image 'kondamani/newimgjava:v1'
      args '-u root --privileged -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  options {
    skipDefaultCheckout(true)
  }

  stages {
    stage('Checkout') {
      steps {
        sh 'echo "üîß Starting Git Checkout"'
        sh 'rm -rf .git || true'  // clean if needed
        sh 'git config --global --add safe.directory /var/lib/jenkins/workspace/java-project'
        git branch: 'main', url: 'https://github.com/kondamani/JAVA_PROJECT.git'
      }
    }

    stage('Debug Git Info') {
      steps {
        sh '''
          echo "üìÅ Workspace contents:"
          ls -al

          echo "üìå Current directory:"
          pwd

          echo "üåÄ Git status:"
          git status || echo "‚ö†Ô∏è Git status failed, maybe not a repo"
        '''
      }
    }

    stage('Build and Test') {
      steps {
        sh 'echo "üõ†Ô∏è Building Maven Project"'
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.87.184.220:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            echo "üìä Running SonarQube Analysis"
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "kondamani/javaproject:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            echo "üê≥ Building Docker Image"
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Helm Chart and Push') {
      environment {
        GIT_REPO_NAME = "JAVA_PROJECT"
        GIT_USER_NAME = "kondamani"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            echo "üöÄ Updating Helm values.yaml with new tag"

            git config user.email "m.kondamani1985@gmail.com"
            git config user.name "kondamani"

            sed -i "s/tag: .*/tag: \\"${BUILD_NUMBER}\\"/" java-maven-sonar-argocd-helm-k8s/eks/helm-chart/javapro/values.yaml

            git add java-maven-sonar-argocd-helm-k8s/eks/helm-chart/javapro/values.yaml
            git commit -m "Update image tag to ${BUILD_NUMBER}" || echo "No changes to commit"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
